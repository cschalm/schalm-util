package org.schalm.util.tools;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Locale;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import org.schalm.util.helper.file.ExampleFileFilter;
import org.schalm.util.helper.file.FileHelper;
import org.schalm.util.helper.log.InMemoryLogger;
import org.schalm.util.helper.xml.XmlHelper;

/**
 * Tool for indenting file using <code>IndentContentHandler</code>.
 *
 * @author <a href="mailto:cschalm@users.sourceforge.net">Carsten Schalm</a>
 * @version $Id: IndentFileApp.java 163 2014-03-06 14:02:38Z cschalm $
 */
public class IndentFileApp extends javax.swing.JDialog {
    private static final InMemoryLogger log = new InMemoryLogger(new SimpleDateFormat("dd.MM.yyyy HH:mm:ss", Locale.GERMAN));
    public static final String fileExtension = "xml";
    private File lastDirectory = null;
    private String filePath;
    private String result;

    /**
     * Creates new form IndentFileTest.
     *
     * @param parent
     * @param modal
     */
    public IndentFileApp(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        new FileDrop(txtFileName, new FileDrop.Listener() {
            @Override
            public void filesDropped(File[] files) {
                try {
                    String canonicalPath = files[0].getCanonicalPath();
                    filePath = canonicalPath;
                    openFile();
                } catch (IOException ignore) {
                    // ignore
                }
            }

        });
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtFileName = new javax.swing.JTextField();
        btnFile = new javax.swing.JButton();
        btnIndent = new javax.swing.JButton();
        sp = new javax.swing.JScrollPane();
        txtMessage = new javax.swing.JTextArea();
        btnSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("FileIndenter");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14));
        jLabel1.setText("Tool for indenting xml-files");

        jLabel2.setText("File:");

        txtFileName.setToolTipText("Enter filename, drop file or choose file with button"); // NOI18N
        txtFileName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFileNameKeyTyped(evt);
            }
        });

        btnFile.setText("Open");
        btnFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFileActionPerformed(evt);
            }
        });

        btnIndent.setText("Indent");
        btnIndent.setEnabled(false);
        btnIndent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIndentActionPerformed(evt);
            }
        });

        txtMessage.setColumns(20);
        txtMessage.setRows(5);
        txtMessage.setTabSize(4);
        sp.setViewportView(txtMessage);

        btnSave.setText("Save");
        btnSave.setEnabled(false);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFileName, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnFile))
                    .addComponent(sp, javax.swing.GroupLayout.DEFAULT_SIZE, 585, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnIndent, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnIndent)
                    .addComponent(btnSave))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sp, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void btnFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFileActionPerformed
        JFileChooser chooser = new JFileChooser();
        ExampleFileFilter filter = new ExampleFileFilter(fileExtension, "XML-Files");
        chooser.setFileFilter(filter);
        if (this.lastDirectory != null) {
            chooser.setCurrentDirectory(this.lastDirectory);
        }
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File currentDirectory = chooser.getCurrentDirectory();
            //this.lastDirectory = currentDirectory;
            String directory = currentDirectory.toString() + FileHelper.FILE_SEPARATOR;
            String fileName = chooser.getSelectedFile().getName();
            this.filePath = directory + fileName;
            openFile();
        }
	}//GEN-LAST:event_btnFileActionPerformed

	private void btnIndentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIndentActionPerformed
        try {
            this.result = XmlHelper.indentXmlDom(this.txtMessage.getText());
            this.setMessage(this.result);
            this.btnSave.setEnabled(true);
        } catch (Exception t) {
            log.log("Error indenting file: " + t.getMessage(), t);
            this.setMessage(log.toString());
            this.btnSave.setEnabled(false);
            this.btnIndent.setEnabled(false);
        }
	}//GEN-LAST:event_btnIndentActionPerformed

	private void txtFileNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFileNameKeyTyped
        this.btnIndent.setEnabled(this.txtFileName.getText() != null && this.txtFileName.getText().length() > 0);
	}//GEN-LAST:event_txtFileNameKeyTyped

	private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            File input = new File(this.filePath);
            if (input.renameTo(new File(this.filePath + ".bak"))) {
                try (BufferedWriter bw = new BufferedWriter(new FileWriter(input))) {
                    bw.write(this.result, 0, this.result.length());
                    bw.flush();
                }
            } else {
                throw new IOException("Unable to rename original file!");
            }
        } catch (IOException t) {
            log.log("Error writing file: " + t.getMessage(), t);
            this.setMessage(log.toString());
        }
        this.btnSave.setEnabled(false);
	}//GEN-LAST:event_btnSaveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            String lookAndFeel = UIManager.getSystemLookAndFeelClassName();
            UIManager.setLookAndFeel(lookAndFeel);
        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException t) {
            log.log("Error setting look and feel: " + t.getMessage(), t);
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                IndentFileApp dialog = new IndentFileApp(new DummyFrame("FileIndenter"), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }

                });
                dialog.setLocationRelativeTo(null);
                dialog.setVisible(true);
            }

        });
    }

    private void openFile() {
        try {
            lastDirectory = new File(filePath).getParentFile();
            this.txtFileName.setText(this.filePath);
            this.setMessage(FileHelper.readTextFile(new File(this.txtFileName.getText())));
            this.btnIndent.setEnabled(this.txtFileName.getText() != null && this.txtFileName.getText().length() > 0);
        } catch (IOException ex) {
            log.log("Error opening file: " + ex.getMessage(), ex);
            this.setMessage(log.toString());
        }
    }

    private void setMessage(String text) {
        this.txtMessage.setText(text);
        this.txtMessage.setCaretPosition(0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFile;
    private javax.swing.JButton btnIndent;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane sp;
    private javax.swing.JTextField txtFileName;
    private javax.swing.JTextArea txtMessage;
    // End of variables declaration//GEN-END:variables

    public static class DummyFrame extends JFrame {

        DummyFrame(String title) {
            super(title);
            setUndecorated(true);
            setVisible(true);
            setLocationRelativeTo(null);
        }

    }

}
